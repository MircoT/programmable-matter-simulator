fmt := import("fmt")

transition := func(state, N1, N2, N1deg) {
    if state != "CONTRACTED" {
        return state
    }

    numN1 := 0
    for n in N1 {
        if n == "CONTRACTED" {
            numN1 += 1
        }
    }
    fmt.println(state, " ", numN1, " ", N1)
    if numN1 == 1 || numN1 == 2 {
        if N1[0] == "CONTRACTED" {
            return "EXPANDL"
        } else if N1[1] == "CONTRACTED" {
            return "EXPANDR"
        } else if N1[2] == "CONTRACTED" {
            return "EXPANDUL"
        } else if N1[3] == "CONTRACTED" {
            return "EXPANDUR"
        } else if N1[4] == "CONTRACTED" {
            return "EXPANDLL"
        } else if N1[5] == "CONTRACTED" {
            return "EXPANDLR"
        }
    } 
    if numN1 == 3 {
        // [l, r, ul, ur, ll, lr]
        // [0, 1,  2,  3,  4,  5]
        all_r := [2, 5, 3, 1, 0, 4]
        all_q := [0, 1, 2, 3, 4, 5]
        all_s := [4, 3, 0, 2, 5, 1]
        for i:=0; i<6; i++ {
            r := all_r[i]
            q := all_q[i]
            s := all_s[i]
            if N1[r] == "CONTRACTED" && N1[q] == "CONTRACTED" && N1[s] == "CONTRACTED" {
                if N1deg[r] > 2 && N1deg[q] > 3 && N1deg[s] > 2 {
                    if q == 0 {
                        return "EXPANDL"
                    } else if q == 1 {
                        return "EXPANDR"
                    } else if q == 2 {
                        return "EXPANDUL"
                    } else if q == 3 {
                        return "EXPANDUR"
                    } else if q == 4 {
                        return "EXPANDLL"
                    } else if q == 5 {
                        return "EXPANDLR"
                    }
                }
            } 
        } 
    }

    return state
}
next_state := transition(state, 
        [l, r, ul, ur, ll, lr], 
        [l2, r2, u2l, u2r, l2l, l2r], 
        [dl, dr, dul, dur, dll, dlr]
    )